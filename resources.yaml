# create a new namespace. This will allow us to enforce specific rules, policy on this subsection
# of the cluster while enabling multiple teams to share the same infrastructure.
apiVersion: v1
kind: Namespace
metadata:
  name: everquote
  labels:
    name: everquote

---
# when we spin this up, if it didn't find the matching volume, it will automatically
# create one for the pod
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: everquote-claim
# spec:
#   accessModes:
#     - ReadWriteOnce 
#   resources:
#     requests:
#       storage: 1Gi

# ---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: callcenter
  namespace: everquote 
  labels:
    app: callcenter
spec:
  replicas: 1
  selector: # define how deployment find which pods to manage.
    matchLabels:
      app: callcenter
  template:
    metadata:
      labels:
        app: callcenter # pod label.
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/hostname
                  operator: In
                  values:
                  - minikube
      containers:
      - name: callcenter
        image: everquote:1.0
        imagePullPolicy: Never
        ports:
        - containerPort: 5000
      #   volumeMounts:
      #   - name: callcenter-storage
      #     mountPath: /app/output
      # volumes:
      # - name: callcenter-storage
      #   persistentVolumeClaim:
      #     claimName: everquote-claim

---

apiVersion: v1
kind: Service
metadata:
  name: callcenter
  namespace: everquote
spec:
  selector: # the service is going to scan the cluster for pod with app=callcenter label.
    app: callcenter
  type: NodePort
  ports:
  - protocol: TCP
    port: 5000 # port exposed to other pods within the cluster.
    targetPort: 5000 # this is where the service is going to the request to and also where the container needs to listen on.
    nodePort: 30007